extends ../../layout/blog-layout.pug
block content
    :markdown-it
        
        ## Stryker.NET version 0.10
        For people who have been following Stryker.NET over the last few months this change might not be a surprise. In version 0.10 Stryker.NET welcomes .NET Framework. For both .NET Core and .NET Framework Stryker.NET has a set of features available.

        For them who don't know Stryker.NET yet, here are some feature highlights:
        
        #### Measure your .NET Core or .NET Framework test quality
        Stryker.NET does this by placing mutations inside your code and running your unit tests on each mutation. To cover as much logic as possible Stryker.NET provides a wide range of mutations. An overview of these mutations can be found [here](/stryker-net/mutators).
        
        #### Create a visual HTML report with the Stryker.NET run output
        Directly after your run, a report is available with insights in your test quality. It shows what mutations were made and if your tests cought the mutant!
    img(alt="stryker", src="/images/stryker-net/html-report-net.png" class="img-fluid")

    :markdown-it
        
        #### VSTest integration
        Stryker.NET hooks right into vstest to execute your unit tests. This means support for the three most used test frameworks:
        - XUnit
        - NUnit
        - MSTest

        Also this improves performance, as Stryker.NET keeps the vstest connection alive between testruns.

        #### See the testrun progress during a Stryker.NET run with a visual progress bar
        During a Stryker.NET run you can track the progress and preview the mutant stats. It also shows an indication of the remaining time to finish.
    img(alt="stryker", src="/images/stryker-net/progress-bar-net.png" class="img-fluid")
    br
    br
    :markdown-it

        #### Multi-platform
        You can run Stryker.NET on Windows, Mac and Linux since it runs on .NET Core.

        #### .NET Core global tool
        Stryker.NET is installed as a [dotnet tool](https://docs.microsoft.com/en-us/dotnet/core/tools/global-tools). This means it can be installed globally on your system and will not conflict with any dependencies on your project. Dotnet tools were introduced recently to .NET Core so you might need to update your .NET Core runtime before you can start using Stryker.NET.

        ## Start using Stryker.NET
        If you have been using Stryker.NET before, you might notice that the installation has changed. Please follow these steps to correctly upgrade and keep your Stryker up to date.
        
        ### 1. Installation
        #### Install stryker **globally***:

        ```
        dotnet tool install -g dotnet-stryker
        ```

    p *Global install needs .NET Core runtime 2.2+ to be installed
    :markdown-it

        #### Install stryker **locally***: 
        Create a file called dotnet-tools.json in your project folder. You should check this file into source control to make sure all team members have access to Stryker and other tools specified here.

        ```
        dotnet new tool-manifest
        ```

        Then install stryker without the -g flag while executing the following command in the project folder

        ```
        dotnet tool install dotnet-stryker
        ```

    p *Local install needs .NET Core runtime 3.0+ to be installed
    :markdown-it
        ### 2. Install dependencies
        For .NET Core projects this step can be skipped.
        
        For .NET Framework projects, make sure [nuget.exe](https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#windows) is installed on your system. Please follow their installation instructions.

        ### 3. Remove old references
        The old way of installing stryker is deprecated and replaced by the dotnet core tool. You can remove the old `DotNetCliToolReference` from your test project since they won't be updated anymore.

        ### 4. Have fun using stryker!
        You can now kick off stryker using 
        ```
        dotnet stryker
        ```

        On .NET Framework projects the solution file is required. You can provide this using:
        ```
        dotnet stryker --solution-path "../MySolution.sln"
        ```

        If stryker is installed as a dotnet core 3.0 local tool, use the following instead:

        ```
        dotnet tool run dotnet-stryker
        ```

        ## What's next?
        The following months we will be focusing on performance and stability. The main next feature will be coverage analysis. How does that work?

        Stryker.NET will use code coverage analysis to spot mutations that cannot be killed by any test. When this is spotted, the mutant will be marked with a `no-coverage` flag. This means the mutant won't have to be tested which saves valuable time.

        ## Contribute
        Want to help make Stryker.NET even better? Check out our [contribution guide](https://github.com/stryker-mutator/stryker-net/blob/master/CONTRIBUTING.md) and [backlog](https://waffle.io/stryker-mutator/stryker-net) to see what help we need.
        
